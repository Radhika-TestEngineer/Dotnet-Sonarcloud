name: SonarCloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global coverlet.console

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"radhika-testengineer_Dotnet-Sonarcloud" \
            /o:"radhika-testengineer" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore -c Release

      - name: Run tests with Coverlet
        run: |
          for proj in $(find . -name "*Tests.csproj" -not -path "*/bin/*" -not -path "*/obj/*" || true); do
            echo "üß™ Running tests for $proj"
            dotnet test "$proj" --no-build -c Release \
              /p:CollectCoverage=true \
              /p:CoverletOutput=TestResults/coverage.opencover.xml \
              /p:CoverletOutputFormat=opencover
          done

      - name: Verify coverage file exists
        run: |
          echo "üìÇ Checking for coverage report..."
          find . -name "coverage.opencover.xml" || (echo "‚ùå Coverage report not found!" && exit 1)

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"

      - name: SonarCloud Quality Gate
        if: success()
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: ./.sonarqube/out/.sonar/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
