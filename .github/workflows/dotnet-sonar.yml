name: .NET CI with SonarCloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarCloud

      - name: Setup .NET      # This is .net setup
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'  # Match your .NET version

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Debug Secrets (Temporary - Remove After Success)
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "SONAR_HOST_URL loaded: ${{ secrets.SONAR_HOST_URL != '' }}"  # Should be 'true'
          echo "SONAR_TOKEN loaded: ${{ secrets.SONAR_TOKEN != '' }}"         # Should be 'true'
          echo "Organization: radhika-testengineer"
          echo "Project Key: Dotnet-Sonarcloud"

      - name: Begin SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Beginning analysis with host: $SONAR_HOST_URL"
          dotnet sonarscanner begin \
            /k:"Dotnet-Sonarcloud" \
            /o:"radhika-testengineer" \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.cs.vstest.reportsPaths="**/*.trx" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test with Coverage
        run: |
          dotnet test --no-build --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger trx \
            --verbosity normal

      - name: End SonarCloud Analysis
        if: always()  # Run even if tests fail
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Ending analysis..."
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"

      - name: Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
